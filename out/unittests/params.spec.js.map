{"version":3,"sources":["../../src/unittests/params.spec.ts"],"names":["description","params","TestGroup","TestGroupTest","UnitTest","g","test","fn","t","fail","combine","a","x","y","filter","p","expect","unless","exclude","t0","ran","push","expectCases"],"mappings":"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","sourcesContent":["export const description = `\nUnit tests for parameterization.\n`;\n\nimport { params } from '../common/framework/params.js';\nimport { ParamSpec } from '../common/framework/params_utils.js';\nimport { TestGroup } from '../common/framework/test_group.js';\n\nimport { TestGroupTest } from './test_group_test.js';\nimport { UnitTest } from './unit_test.js';\n\nexport const g = new TestGroup(TestGroupTest);\n\ng.test('none')\n  .params([])\n  .fn(t => {\n    t.fail(\"this test shouldn't run\");\n  });\n\ng.test('combine none')\n  .params(params().combine([]))\n  .fn(t => {\n    t.fail(\"this test shouldn't run\");\n  });\n\ng.test('filter')\n  .params(\n    params()\n      .combine([\n        { a: true, x: 1 }, //\n        { a: false, y: 2 },\n      ])\n      .filter(p => p.a)\n  )\n  .fn(t => {\n    t.expect(t.params.a);\n  });\n\ng.test('unless')\n  .params(\n    params()\n      .combine([\n        { a: true, x: 1 }, //\n        { a: false, y: 2 },\n      ])\n      .unless(p => p.a)\n  )\n  .fn(t => {\n    t.expect(!t.params.a);\n  });\n\ng.test('exclude')\n  .params(\n    params()\n      .combine([\n        { a: true, x: 1 },\n        { a: false, y: 2 },\n      ])\n      .exclude([\n        { a: true }, //\n        { a: false, y: 2 },\n      ])\n  )\n  .fn(t => {\n    t.expect(t.params.a);\n  });\n\ng.test('generator').fn(t0 => {\n  const g = new TestGroup(UnitTest);\n\n  const ran: ParamSpec[] = [];\n\n  g.test('generator')\n    .params(\n      (function* (): IterableIterator<ParamSpec> {\n        for (let x = 0; x < 3; ++x) {\n          for (let y = 0; y < 2; ++y) {\n            yield { x, y };\n          }\n        }\n      })()\n    )\n    .fn(t => {\n      ran.push(t.params);\n    });\n\n  t0.expectCases(g, [\n    { test: 'generator', params: { x: 0, y: 0 } },\n    { test: 'generator', params: { x: 0, y: 1 } },\n    { test: 'generator', params: { x: 1, y: 0 } },\n    { test: 'generator', params: { x: 1, y: 1 } },\n    { test: 'generator', params: { x: 2, y: 0 } },\n    { test: 'generator', params: { x: 2, y: 1 } },\n  ]);\n});\n"],"file":"params.spec.js"}