{"version":3,"sources":["../../../../src/webgpu/web-platform/reftests/canvas_complex.ts"],"names":["unreachable","assert","runRefTest","formats","URLSearchParams","window","location","search","getAll","length","format","t","ctx","cvs","getContext","swapChain","configureSwapChain","device","usage","GPUTextureUsage","COPY_DST","rows","bytesPerRow","buffer","mapping","createBufferMapped","size","GPUBufferUsage","COPY_SRC","data","Uint8Array","set","zero","half","one","DataView","setUint16","unmap","texture","getCurrentTexture","encoder","createCommandEncoder","copyBufferToTexture","defaultQueue","submit","finish"],"mappings":"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","sourcesContent":["import { unreachable, assert } from '../../../common/framework/util/util.js';\n\nimport { runRefTest } from './gpu_ref_test.js';\n\n// <canvas> element from html page\ndeclare const cvs: HTMLCanvasElement;\n\nconst formats = new URLSearchParams(window.location.search).getAll('format');\nassert(formats.length === 1);\nconst format = formats[0];\n\nrunRefTest(async t => {\n  const ctx = (cvs.getContext('gpupresent') as unknown) as GPUCanvasContext;\n\n  switch (format) {\n    case 'bgra8unorm':\n    case 'rgba16float':\n      break;\n    default:\n      unreachable();\n  }\n\n  const swapChain = ctx.configureSwapChain({\n    device: t.device,\n    format,\n    usage: GPUTextureUsage.COPY_DST,\n  });\n\n  const rows = 2;\n  const bytesPerRow = 256;\n  const [buffer, mapping] = t.device.createBufferMapped({\n    size: rows * bytesPerRow,\n    usage: GPUBufferUsage.COPY_SRC,\n  });\n  switch (format) {\n    case 'bgra8unorm':\n      {\n        const data = new Uint8Array(mapping);\n        data.set(new Uint8Array([0x00, 0x00, 0x7f, 0xff]), 0); // red\n        data.set(new Uint8Array([0x00, 0x7f, 0x00, 0xff]), 4); // green\n        data.set(new Uint8Array([0x7f, 0x00, 0x00, 0xff]), 256 + 0); // blue\n        data.set(new Uint8Array([0x00, 0x7f, 0x7f, 0xff]), 256 + 4); // yellow\n      }\n      break;\n    case 'rgba16float':\n      {\n        // Untested!\n        const zero = 0x0000;\n        const half = 0x3800;\n        const one = 0x3c00;\n        const data = new DataView(mapping);\n        data.setUint16(0x000, half, false); // red\n        data.setUint16(0x002, zero, false);\n        data.setUint16(0x004, zero, false);\n        data.setUint16(0x008, one, false);\n        data.setUint16(0x010, zero, false); // green\n        data.setUint16(0x020, half, false);\n        data.setUint16(0x040, zero, false);\n        data.setUint16(0x080, one, false);\n        data.setUint16(0x100, zero, false); // blue\n        data.setUint16(0x102, zero, false);\n        data.setUint16(0x104, half, false);\n        data.setUint16(0x108, one, false);\n        data.setUint16(0x110, half, false); // yellow\n        data.setUint16(0x120, half, false);\n        data.setUint16(0x140, zero, false);\n        data.setUint16(0x180, one, false);\n      }\n      break;\n  }\n  buffer.unmap();\n\n  const texture = swapChain.getCurrentTexture();\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture({ buffer, bytesPerRow }, { texture }, [2, 2, 1]);\n  t.device.defaultQueue.submit([encoder.finish()]);\n});\n"],"file":"canvas_complex.js"}